//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChessClient.GameSessionEstablishmentServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResult", Namespace="http://schemas.datacontract.org/2004/07/GameSessionEstablishmentService")]
    [System.SerializableAttribute()]
    public partial class OperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameDescription", Namespace="http://schemas.datacontract.org/2004/07/GameSessionEstablishmentService")]
    [System.SerializableAttribute()]
    public partial class GameDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChessClient.GameSessionEstablishmentServiceRef.Player BlackPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateDerscriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TurnDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChessClient.GameSessionEstablishmentServiceRef.Player WhitePlayerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChessClient.GameSessionEstablishmentServiceRef.Player BlackPlayer {
            get {
                return this.BlackPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.BlackPlayerField, value) != true)) {
                    this.BlackPlayerField = value;
                    this.RaisePropertyChanged("BlackPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasPassword {
            get {
                return this.HasPasswordField;
            }
            set {
                if ((this.HasPasswordField.Equals(value) != true)) {
                    this.HasPasswordField = value;
                    this.RaisePropertyChanged("HasPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateDerscription {
            get {
                return this.StateDerscriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.StateDerscriptionField, value) != true)) {
                    this.StateDerscriptionField = value;
                    this.RaisePropertyChanged("StateDerscription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TurnDescription {
            get {
                return this.TurnDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.TurnDescriptionField, value) != true)) {
                    this.TurnDescriptionField = value;
                    this.RaisePropertyChanged("TurnDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChessClient.GameSessionEstablishmentServiceRef.Player WhitePlayer {
            get {
                return this.WhitePlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.WhitePlayerField, value) != true)) {
                    this.WhitePlayerField = value;
                    this.RaisePropertyChanged("WhitePlayer");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/GameSessionEstablishmentService")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RatingForDrawField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RatingForLoseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RatingForWinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalScoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RatingForDraw {
            get {
                return this.RatingForDrawField;
            }
            set {
                if ((this.RatingForDrawField.Equals(value) != true)) {
                    this.RatingForDrawField = value;
                    this.RaisePropertyChanged("RatingForDraw");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RatingForLose {
            get {
                return this.RatingForLoseField;
            }
            set {
                if ((this.RatingForLoseField.Equals(value) != true)) {
                    this.RatingForLoseField = value;
                    this.RaisePropertyChanged("RatingForLose");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RatingForWin {
            get {
                return this.RatingForWinField;
            }
            set {
                if ((this.RatingForWinField.Equals(value) != true)) {
                    this.RatingForWinField = value;
                    this.RaisePropertyChanged("RatingForWin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalScore {
            get {
                return this.TotalScoreField;
            }
            set {
                if ((this.TotalScoreField.Equals(value) != true)) {
                    this.TotalScoreField = value;
                    this.RaisePropertyChanged("TotalScore");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameSessionEstablishmentServiceRef.IGameSessionEstablishment", CallbackContract=typeof(ChessClient.GameSessionEstablishmentServiceRef.IGameSessionEstablishmentCallback))]
    public interface IGameSessionEstablishment {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/ConnectToTheGame")]
        void ConnectToTheGame(int gameId, string username, string password, string gamePassword);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/ConnectToTheGame")]
        System.Threading.Tasks.Task ConnectToTheGameAsync(int gameId, string username, string password, string gamePassword);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/DisconnectFromTheGame")]
        void DisconnectFromTheGame();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/DisconnectFromTheGame")]
        System.Threading.Tasks.Task DisconnectFromTheGameAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/CreateNewGame")]
        void CreateNewGame(string username, string password, string gamename, ChessDotNet.Player side, string gamePassword);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/CreateNewGame")]
        System.Threading.Tasks.Task CreateNewGameAsync(string username, string password, string gamename, ChessDotNet.Player side, string gamePassword);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/SendMessage")]
        void SendMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/Move")]
        void Move(string originalPosition, string newPosition);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/Move")]
        System.Threading.Tasks.Task MoveAsync(string originalPosition, string newPosition);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/GetGames")]
        void GetGames();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/GetGames")]
        System.Threading.Tasks.Task GetGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/SignupUser")]
        void SignupUser(string username, string password, string confirmedPassword);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/SignupUser")]
        System.Threading.Tasks.Task SignupUserAsync(string username, string password, string confirmedPassword);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/ChangeUsername")]
        void ChangeUsername(string username, string password, string newUsername);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/ChangeUsername")]
        System.Threading.Tasks.Task ChangeUsernameAsync(string username, string password, string newUsername);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/LoginUser")]
        void LoginUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/LoginUser")]
        System.Threading.Tasks.Task LoginUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/SystemRequestForGameMaintenance")]
        void SystemRequestForGameMaintenance();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/SystemRequestForGameMaintenance")]
        System.Threading.Tasks.Task SystemRequestForGameMaintenanceAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameSessionEstablishmentCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/CallbackInfo")]
        void CallbackInfo(ChessClient.GameSessionEstablishmentServiceRef.OperationResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/SuccesfullConnectionToTheGame")]
        void SuccesfullConnectionToTheGame(ChessClient.GameSessionEstablishmentServiceRef.GameDescription gameDescription);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/UsernameChanged")]
        void UsernameChanged(string newUsername);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/OnMoved")]
        void OnMoved(string originalPosition, string newPosition);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/GamesGetted")]
        void GamesGetted(ChessClient.GameSessionEstablishmentServiceRef.GameDescription[] games);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/SuccesfullAuthentificate")]
        void SuccesfullAuthentificate(string username, string password, int rating);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/GameUpdated")]
        void GameUpdated(ChessClient.GameSessionEstablishmentServiceRef.GameDescription gameDescription);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSessionEstablishment/OnMessage")]
        void OnMessage(string playerName, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameSessionEstablishmentChannel : ChessClient.GameSessionEstablishmentServiceRef.IGameSessionEstablishment, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameSessionEstablishmentClient : System.ServiceModel.DuplexClientBase<ChessClient.GameSessionEstablishmentServiceRef.IGameSessionEstablishment>, ChessClient.GameSessionEstablishmentServiceRef.IGameSessionEstablishment {
        
        public GameSessionEstablishmentClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameSessionEstablishmentClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameSessionEstablishmentClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameSessionEstablishmentClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameSessionEstablishmentClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectToTheGame(int gameId, string username, string password, string gamePassword) {
            base.Channel.ConnectToTheGame(gameId, username, password, gamePassword);
        }
        
        public System.Threading.Tasks.Task ConnectToTheGameAsync(int gameId, string username, string password, string gamePassword) {
            return base.Channel.ConnectToTheGameAsync(gameId, username, password, gamePassword);
        }
        
        public void DisconnectFromTheGame() {
            base.Channel.DisconnectFromTheGame();
        }
        
        public System.Threading.Tasks.Task DisconnectFromTheGameAsync() {
            return base.Channel.DisconnectFromTheGameAsync();
        }
        
        public void CreateNewGame(string username, string password, string gamename, ChessDotNet.Player side, string gamePassword) {
            base.Channel.CreateNewGame(username, password, gamename, side, gamePassword);
        }
        
        public System.Threading.Tasks.Task CreateNewGameAsync(string username, string password, string gamename, ChessDotNet.Player side, string gamePassword) {
            return base.Channel.CreateNewGameAsync(username, password, gamename, side, gamePassword);
        }
        
        public void SendMessage(string message) {
            base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public void Move(string originalPosition, string newPosition) {
            base.Channel.Move(originalPosition, newPosition);
        }
        
        public System.Threading.Tasks.Task MoveAsync(string originalPosition, string newPosition) {
            return base.Channel.MoveAsync(originalPosition, newPosition);
        }
        
        public void GetGames() {
            base.Channel.GetGames();
        }
        
        public System.Threading.Tasks.Task GetGamesAsync() {
            return base.Channel.GetGamesAsync();
        }
        
        public void SignupUser(string username, string password, string confirmedPassword) {
            base.Channel.SignupUser(username, password, confirmedPassword);
        }
        
        public System.Threading.Tasks.Task SignupUserAsync(string username, string password, string confirmedPassword) {
            return base.Channel.SignupUserAsync(username, password, confirmedPassword);
        }
        
        public void ChangeUsername(string username, string password, string newUsername) {
            base.Channel.ChangeUsername(username, password, newUsername);
        }
        
        public System.Threading.Tasks.Task ChangeUsernameAsync(string username, string password, string newUsername) {
            return base.Channel.ChangeUsernameAsync(username, password, newUsername);
        }
        
        public void LoginUser(string username, string password) {
            base.Channel.LoginUser(username, password);
        }
        
        public System.Threading.Tasks.Task LoginUserAsync(string username, string password) {
            return base.Channel.LoginUserAsync(username, password);
        }
        
        public void SystemRequestForGameMaintenance() {
            base.Channel.SystemRequestForGameMaintenance();
        }
        
        public System.Threading.Tasks.Task SystemRequestForGameMaintenanceAsync() {
            return base.Channel.SystemRequestForGameMaintenanceAsync();
        }
    }
}
